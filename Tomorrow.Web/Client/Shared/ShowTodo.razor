@inject HttpClient HttpClient
@inherits OwningComponentBase<HttpHelper>

@if (viewMode)
{
    string completedClass = "";
    if (Todo.Completed)
        completedClass = "completed-task";
    <MudCard Class="@completedClass">
        <MudCardContent>
            <MudText Typo="Typo.h6" Class="card-title">
                @Todo.Name
            </MudText>
            @{
                (var urgency, var cssClass) = getUrgency(Todo.Priority);
            }
            <MudText Typo="Typo.subtitle2" Class="@cssClass">@urgency</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="ShowEditor">Edit</MudButton>
            @if (!Todo.Completed)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Done" Color="Color.Default" @onclick="CompleteAsync" />
            }
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" @onclick="DeleteAsync" />
        </MudCardActions>
    </MudCard>
}
else
{
    <EditTodo Todo="@Todo" AfterEdit="CloseEditorAsync" OnGroupChange="GroupChange"></EditTodo>
}

@code {
    [Parameter]
    public Todo Todo { get; set; }

    [Parameter]
    public EventCallback<Todo> OnDelete { get; set; }

    [Parameter]
    public EventCallback<Todo> OnGroupChange { get; set; }

    [Parameter]
    public EventCallback OnComplete { get; set; }
    private bool viewMode = true;

    public Task GroupChange()
    {
        return OnGroupChange.InvokeAsync(Todo);
    }
    public async Task CompleteAsync()
    {
        await Service.CompleteAsync(Todo);
        await OnComplete.InvokeAsync();
        StateHasChanged();
    }
    public async Task DeleteAsync()
    {
        Service.DeleteTodoAsync(Todo);

        await OnDelete.InvokeAsync(Todo);
        StateHasChanged();
    }

    public void ShowEditor()
    {
        viewMode = false;
        StateHasChanged();
    }
    public async Task CloseEditorAsync()
    {
        viewMode = true;
        StateHasChanged();
    }
    public (string urgencyName, string cssClass) getUrgency(int priority)
    {
        string urgency = "very urgent";
        string cssClass = "very-urgent";
        if (Todo.Priority < 8)
        {
            urgency = "urgent";
            cssClass = "urgent";
        }
        if (Todo.Priority < 5)
        {
            urgency = "soon";
            cssClass = "not-urgent";
        }
        if (Todo.Priority < 2)
        {
            urgency = "sometime";
            cssClass = "sometime";
        }
        if (Todo.Priority == 0)
        {
            urgency = "unspecified";
            cssClass = "unspecified";

        }
        return (urgency, cssClass);
    }

}