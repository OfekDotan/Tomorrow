@inject HttpClient HttpClient
@inherits OwningComponentBase<HttpHelper>

<EditForm Model="@Todo" OnValidSubmit="EditAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MudTextField Label="Name" Variant="Variant.Outlined" @bind-Value="@Todo.Name">
    </MudTextField>
    <MudNumericField @bind-Value="@Todo.Priority" Label="Priority" Variant="Variant.Outlined" Step="1" />
    <MudSelect T="string" Label="Select a group or leave empty" @bind-Value="@Todo.GroupId">
        @foreach (var group in groups)
        {
            <MudSelectItem Value="@group.Id">
                @group.Name
            </MudSelectItem>
        }
    </MudSelect>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" ButtonType="ButtonType.Submit">Save</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" ButtonType="ButtonType.Button" OnClick="ResetGroup">Clear group selected</MudButton>
</EditForm>

@code {
    [Parameter]
    public Todo Todo { get; set; }

    private string? todoOriginalGroupId;

    [Parameter]
    public EventCallback AfterEdit { get; set; }

    [Parameter]
    public EventCallback OnGroupChange { get; set; }

    private List<Group> groups = new List<Group>();

    protected override async Task OnInitializedAsync()
    {
        todoOriginalGroupId = Todo.GroupId;
        groups.AddRange(await Service.GetGroupsAsync());
        StateHasChanged();
    }

    public void ResetGroup()
    {
        Todo.GroupId = null;
    }

    public async Task EditAsync()
    {
        await Service.EditTodoAsync(Todo);
        await AfterEdit.InvokeAsync();
        if (todoOriginalGroupId != Todo.GroupId)
            await OnGroupChange.InvokeAsync();
    }
}