// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tomorrow.Application;

namespace Tomorrow.Application.Migrations
{
    [DbContext(typeof(CustomDbContext))]
    [Migration("20210519093400_ViewAndEditPermissions")]
    partial class ViewAndEditPermissions
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TodoEditPermissions", b =>
                {
                    b.Property<Guid>("EditableTodosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountsThatCanEditId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EditableTodosId", "accountsThatCanEditId");

                    b.HasIndex("accountsThatCanEditId");

                    b.ToTable("TodoEditPermissions");
                });

            modelBuilder.Entity("TodoViewPermissions", b =>
                {
                    b.Property<Guid>("ViewableTodosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountsThatCanViewId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ViewableTodosId", "accountsThatCanViewId");

                    b.HasIndex("accountsThatCanViewId");

                    b.ToTable("TodoViewPermissions");
                });

            modelBuilder.Entity("Tomorrow.DomainModel.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Tomorrow.DomainModel.Groups.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Tomorrow.DomainModel.Todos.Todo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archived")
                        .HasColumnType("bit");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("TodoEditPermissions", b =>
                {
                    b.HasOne("Tomorrow.DomainModel.Todos.Todo", null)
                        .WithMany()
                        .HasForeignKey("EditableTodosId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Tomorrow.DomainModel.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("accountsThatCanEditId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodoViewPermissions", b =>
                {
                    b.HasOne("Tomorrow.DomainModel.Todos.Todo", null)
                        .WithMany()
                        .HasForeignKey("ViewableTodosId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Tomorrow.DomainModel.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("accountsThatCanViewId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tomorrow.DomainModel.Groups.Group", b =>
                {
                    b.HasOne("Tomorrow.DomainModel.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tomorrow.DomainModel.Todos.Todo", b =>
                {
                    b.HasOne("Tomorrow.DomainModel.Groups.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("Tomorrow.DomainModel.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Tomorrow.DomainModel.Todos.Priority", "Priority", b1 =>
                        {
                            b1.Property<Guid>("TodoId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("priority")
                                .HasColumnType("int")
                                .HasColumnName("Priority");

                            b1.HasKey("TodoId");

                            b1.ToTable("Todos");

                            b1.WithOwner()
                                .HasForeignKey("TodoId");
                        });

                    b.Navigation("Priority")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
